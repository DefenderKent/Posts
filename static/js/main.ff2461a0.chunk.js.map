{"version":3,"sources":["redux/appReduser.js","redux/postsReduser.js","components/Alert.jsx","components/PostForm.jsx","components/Post.jsx","components/Posts.jsx","components/Loader.jsx","components/FetchedPosts.jsx","App.js","serviceWorker.js","redux/rootReduser.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["initialState","loading","alert","showAlert","text","dispatch","type","payload","setTimeout","hideAlert","posts","fetchedPost","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","console","log","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","app","syncPosts","length","map","index","Post","key","Loader","useDispatch","useSelector","onClick","App","FetchedPosts","Boolean","window","location","hostname","match","rootReduser","combineReducers","action","concat","spamWords","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff2461a0.chunk.js","sourcesContent":["const SHOW_LOADER = \"APP/SHOW_LOADER\";\r\nconst HIDE_LOADER = \"APP/HIDE_LOADER\";\r\nconst SHOW_ALERT = \"APP/SHOW_ALERT\";\r\nconst HIDE_ALERT = \"APP/HIDE_ALERT\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  alert: null,\r\n};\r\n\r\nexport const appReduser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SHOW_LOADER:\r\n      return { ...state, loading: true };\r\n    case HIDE_LOADER:\r\n      return { ...state, loading: false };\r\n    case SHOW_ALERT:\r\n      return { ...state, alert: action.payload };\r\n    case HIDE_ALERT:\r\n      return { ...state, alert: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const showLoader = () => {\r\n  return { type: SHOW_LOADER };\r\n};\r\nexport const hideLoader = () => {\r\n  return { type: HIDE_LOADER };\r\n};\r\nexport const showAlert = (text, dispatch) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: SHOW_ALERT, payload: text });\r\n    setTimeout(() => {\r\n      dispatch(hideAlert());\r\n    }, 3000);\r\n  };\r\n};\r\nexport const hideAlert = () => {\r\n  return { type: HIDE_ALERT };\r\n};\r\n","import { showLoader, hideLoader, showAlert } from \"./appReduser\";\r\n\r\nconst CREATE_POST = \"POST/CREATE_POST\";\r\nexport const FETCH_POST = \"POST/FETCH_POST\";\r\nexport const REQUEST_POSTS = \"POST/REQUEST_POSTS\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchedPost: [],\r\n};\r\n\r\nexport const postsReduser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_POST:\r\n      return { ...state, posts: state.posts.concat([action.payload]) };\r\n    case FETCH_POST:\r\n      return { ...state, fetchedPost: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const createPost = (post) => {\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: post,\r\n  };\r\n};\r\nexport const fetchPosts = () => {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n  };\r\n  //   return async (dispatch) => {\r\n  //     try {\r\n  //       dispatch(showLoader());\r\n  //       const response = await fetch(\r\n  //         \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n  //       );\r\n  //       const json = await response.json();\r\n  //       dispatch({ type: FETCH_POST, payload: json });\r\n  //       dispatch(hideLoader());\r\n  //     } catch (e) {\r\n  //       dispatch(showAlert(\"Ошибка сервера\"));\r\n  //       dispatch(hideLoader());\r\n  //     }\r\n  //   };\r\n};\r\n","import React from \"react\";\r\nconst Alert = ({ text }) => {\r\n  return (\r\n    <div className=\"alert alert-danger\" role=\"alert\">\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"./../redux/postsReduser\";\r\nimport { showAlert } from \"./../redux/appReduser\";\r\nimport Alert from \"./Alert\";\r\n\r\nclass PostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n    };\r\n  }\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const { title } = this.state;\r\n    if (!title.trim()) {\r\n      return this.props.showAlert(\"Поле заголовка пустое\");\r\n    }\r\n    const newPost = {\r\n      title,\r\n      id: Date.now().toString(),\r\n    };\r\n    console.log(newPost);\r\n    this.props.createPost(newPost);\r\n    this.setState({ title: \"\" });\r\n  };\r\n  changeInputHandler = (event) => {\r\n    event.persist();\r\n    this.setState((prev) => ({\r\n      ...prev,\r\n      ...{\r\n        [event.target.name]: event.target.value,\r\n      },\r\n    }));\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitHandler}>\r\n        {this.props.alert && <Alert text={this.props.alert} />}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"title\">Заголовок поста</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            value={this.state.title}\r\n            name=\"title\"\r\n            onChange={this.changeInputHandler}\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-success\" type=\"submit\">\r\n          Создать\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  createPost,\r\n  showAlert,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  alert: state.app.alert,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);\r\n","import React from \"react\";\r\n\r\nexport default ({ post }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{post.title}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Posts = ({ syncPosts }) => {\r\n  if (!syncPosts.length) {\r\n    return <p className=\"text-center\">Постов нет</p>;\r\n  }\r\n  return syncPosts.map((post, index) => <Post post={post} key={post.id} />);\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    syncPosts: state.posts.posts,\r\n  };\r\n};\r\nexport default connect(mapStatetoProps)(Posts);\r\n","import React from \"react\";\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"spinner-border text-success\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport { fetchPosts } from \"./../redux/postsReduser\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"./Loader\";\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.posts.fetchedPost);\r\n  const loading = useSelector((state) => state.app.loading);\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n  if (!posts.length) {\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => dispatch(fetchPosts())}\r\n      >\r\n        Загрузить\r\n      </button>\r\n    );\r\n  }\r\n  return posts.map((post, index) => <Post post={post} key={index} />);\r\n};\r\n","import React from \"react\";\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\nimport FetchedPosts from \"./components/FetchedPosts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-5\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>Cинхорнные посты</h1>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h1>Aсинхорнные посты</h1>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { postsReduser } from \"./postsReduser\";\r\nimport { appReduser } from \"./appReduser\";\r\n\r\nexport const rootReduser = combineReducers({\r\n  posts: postsReduser,\r\n  app: appReduser,\r\n});\r\n","import { showAlert } from \"./appReduser\";\r\n\r\nconst CREATE_POST = \"POST/CREATE_POST\";\r\nconst spamWords = [\"ggg\", \"ric\"];\r\nexport function spamWordsMiddle({ dispatch }) {\r\n  return function (next) {\r\n    return function (action) {\r\n      if (action.type === CREATE_POST) {\r\n        const found = spamWords.filter((w) => action.payload.title.includes(w));\r\n        if (found.length) {\r\n          return dispatch(showAlert(\"Запретное слово\"));\r\n        }\r\n      }\r\n      return next(action);\r\n    };\r\n  };\r\n}\r\n","import { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { REQUEST_POSTS, FETCH_POST } from \"./postsReduser\";\r\nimport { showLoader, hideLoader } from \"./appReduser\";\r\nimport { showAlert } from \"./appReduser\";\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(REQUEST_POSTS, sagaWorker);\r\n}\r\nfunction* sagaWorker() {\r\n  try {\r\n    yield put(showLoader());\r\n    const payload = yield call(fetchPosts);\r\n    yield put({ type: FETCH_POST, payload });\r\n    yield put(hideLoader());\r\n  } catch (e) {\r\n    yield put(showAlert(\"Ошибка сервера\"));\r\n    yield put(hideLoader());\r\n  }\r\n}\r\nasync function fetchPosts() {\r\n  const response = await fetch(\r\n    \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n  );\r\n  return await response.json();\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport thunk from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { rootReduser } from \"./redux/rootReduser\";\nimport { Provider } from \"react-redux\";\nimport { spamWordsMiddle } from \"./redux/middleware\";\nimport { sagaWatcher } from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReduser,\n  compose(\n    applyMiddleware(thunk, spamWordsMiddle, saga),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nsaga.run(sagaWatcher);\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}